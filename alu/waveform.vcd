$version Generated by VerilatedVcd $end
$date 06/28/21 11:43:00 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 A assert_bus $end
  $var wire  1 C bus_en $end
  $var wire  8 B bus_out [7:0] $end
  $var wire  1 = clk $end
  $var wire  1 E flag_acarry $end
  $var wire  1 F flag_lcarry $end
  $var wire  1 H flag_overflow $end
  $var wire  1 G flag_sign $end
  $var wire  1 D flag_zero $end
  $var wire  8 > lhs_in [7:0] $end
  $var wire  4 @ operation [3:0] $end
  $var wire  8 ? rhs_in [7:0] $end
  $scope module alu $end
   $var wire 32 K WIDTH [31:0] $end
   $var wire  1 3 alu_clk $end
   $var wire  2 6 aluop_carry_select [1:0] $end
   $var wire  4 4 aluop_logic_op [3:0] $end
   $var wire  2 5 aluop_shift_select [1:0] $end
   $var wire  1 A assert_bus $end
   $var wire  1 C bus_en $end
   $var wire  8 B bus_out [7:0] $end
   $var wire  1 I carry $end
   $var wire  1 = clk $end
   $var wire  1 E flag_acarry $end
   $var wire  1 F flag_lcarry $end
   $var wire  1 H flag_overflow $end
   $var wire  1 G flag_sign $end
   $var wire  1 D flag_zero $end
   $var wire  1 L lhs_carry_in $end
   $var wire  1 : lhs_carry_out $end
   $var wire  8 > lhs_in [7:0] $end
   $var wire  8 9 lhs_out [7:0] $end
   $var wire  4 @ operation [3:0] $end
   $var wire  1 < prev_carry $end
   $var wire  9 7 result [8:0] $end
   $var wire  8 ? rhs_in [7:0] $end
   $var wire  8 ; rhs_out [7:0] $end
   $scope module alu_op1 $end
    $var wire  1 3 alu_clk $end
    $var wire  2 6 carry_select [1:0] $end
    $var wire  1 = clk $end
    $var wire  8 8 current_op [7:0] $end
    $var wire  4 4 logic_op [3:0] $end
    $var wire  4 @ operation [3:0] $end
    $var wire  8 # ops(0) [7:0] $end
    $var wire  8 $ ops(1) [7:0] $end
    $var wire  8 - ops(10) [7:0] $end
    $var wire  8 . ops(11) [7:0] $end
    $var wire  8 / ops(12) [7:0] $end
    $var wire  8 0 ops(13) [7:0] $end
    $var wire  8 1 ops(14) [7:0] $end
    $var wire  8 2 ops(15) [7:0] $end
    $var wire  8 % ops(2) [7:0] $end
    $var wire  8 & ops(3) [7:0] $end
    $var wire  8 ' ops(4) [7:0] $end
    $var wire  8 ( ops(5) [7:0] $end
    $var wire  8 ) ops(6) [7:0] $end
    $var wire  8 * ops(7) [7:0] $end
    $var wire  8 + ops(8) [7:0] $end
    $var wire  8 , ops(9) [7:0] $end
    $var wire  1 J select0 $end
    $var wire  2 5 shift_select [1:0] $end
   $upscope $end
   $scope module lhs1 $end
    $var wire 32 K WIDTH [31:0] $end
    $var wire  1 3 alu_clk $end
    $var wire  1 L carry_in $end
    $var wire  1 : carry_out $end
    $var wire  8 > in [7:0] $end
    $var wire  2 5 operation [1:0] $end
    $var wire  8 9 out [7:0] $end
   $upscope $end
   $scope module rhs1 $end
    $var wire 32 K WIDTH [31:0] $end
    $var wire  1 3 alu_clk $end
    $var wire  8 > lhs_in [7:0] $end
    $var wire  4 4 operation [3:0] $end
    $var wire  8 ; out [7:0] $end
    $var wire  8 ? rhs_in [7:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000 #
b00010000 $
b00100000 %
b00001100 &
b01001100 '
b10000000 (
b01000000 )
b10000011 *
b01000011 +
b00001111 ,
b00111000 -
b00111110 .
b00110110 /
b00110011 0
b00110000 1
b00110000 2
03
b0000 4
b00 5
b00 6
b000000000 7
b00000000 8
b00000000 9
0:
b00000000 ;
0<
1=
b00000000 >
b00000000 ?
b0000 @
0A
b00000000 B
1C
1D
0E
0F
0G
0H
0I
1J
b00000000000000000000000000001000 K
0L
#1
13
b1000 4
b11 5
b001010101 7
b00111000 8
b01010101 9
b01010101 >
b10101010 ?
b1010 @
b01010101 B
0D
0J
#2
b1110 4
b00111110 8
b1011 @
#3
03
0=
#4
13
b011111111 7
b00000000 9
b11111111 ;
1=
b11111111 B
1G
#5
03
0=
#6
13
1=
#7
03
0=
